version: "3.2"

services:
  # Postgres as a main storage
  db:
    restart: always
    image: postgres:15-alpine
    container_name: db
    ports:
      - "5432:5432"
    expose:
      - 5432
    environment:
      - POSTGRES_DB=uks
      - POSTGRES_PASSWORD=root
      - POSTGRES_USER=postgres
    networks:
      - uks

  # redis as a cache store
  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - uks

  api:
    image: ${REGISTRY:-uks}/api:${TAG:-latest}
    container_name: api
    build:
      context: ./backend/uks
    depends_on:
      - db
      - redis
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/uks
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
      - SPRING_PROFILES_ACTIVE=dev
      - TOKEN_SECRET=2aafbe15fde010e3a6de59e99c0adfd13bd40b60e3e5fdf351b263c3c7f72b35
    ports:
      - "8881:8881"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - uks

  front:
    image: ${REGISTRY:-uks}/webapp:${TAG:-latest}
    container_name: front
    build:
      context: ./frontend/uks
    networks:
      - uks

  # Nginx as a web server and reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api
      - front
    networks:
      - uks

networks:
  uks:
    driver: bridge
